// Mocks generated by Mockito 5.4.4 from annotations
// in newsapp/test/headlines/presentation/list/headlines_list.screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;
import 'package:newsapp/articles/articles.dart' as _i4;
import 'package:newsapp/core/presentation/navigation/app_router.dart' as _i3;
import 'package:newsapp/sources/sources.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppRouter extends _i2.Mock implements _i3.AppRouter {
  MockAppRouter() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.NavigatorState> get rootNavigatorKey => (super.noSuchMethod(
        Invocation.getter(#rootNavigatorKey),
        returnValue: _FakeGlobalKey_0<_i1.NavigatorState>(
          this,
          Invocation.getter(#rootNavigatorKey),
        ),
      ) as _i1.GlobalKey<_i1.NavigatorState>);

  @override
  void openArticleDetails(_i4.Article? article) => super.noSuchMethod(
        Invocation.method(
          #openArticleDetails,
          [article],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void openCategorySources(String? category) => super.noSuchMethod(
        Invocation.method(
          #openCategorySources,
          [category],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void openSourceDetails(_i5.Source? source) => super.noSuchMethod(
        Invocation.method(
          #openSourceDetails,
          [source],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ArticlesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticlesRepository extends _i2.Mock
    implements _i4.ArticlesRepository {
  MockArticlesRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i4.Article>> getTopHeadlines({
    String? category,
    List<String>? sources,
    String? query,
    int? page,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopHeadlines,
          [],
          {
            #category: category,
            #sources: sources,
            #query: query,
            #page: page,
          },
        ),
        returnValue: _i6.Future<List<_i4.Article>>.value(<_i4.Article>[]),
      ) as _i6.Future<List<_i4.Article>>);

  @override
  _i6.Future<List<_i4.Article>> getEverything({
    String? query,
    String? searchIn,
    List<String>? sources,
    List<String>? domains,
    List<String>? excludeDomains,
    DateTime? fromDate,
    DateTime? toDate,
    String? sortBy,
    int? page,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEverything,
          [],
          {
            #query: query,
            #searchIn: searchIn,
            #sources: sources,
            #domains: domains,
            #excludeDomains: excludeDomains,
            #fromDate: fromDate,
            #toDate: toDate,
            #sortBy: sortBy,
            #page: page,
          },
        ),
        returnValue: _i6.Future<List<_i4.Article>>.value(<_i4.Article>[]),
      ) as _i6.Future<List<_i4.Article>>);
}
